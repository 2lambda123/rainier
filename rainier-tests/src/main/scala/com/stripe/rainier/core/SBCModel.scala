package com.stripe.rainier.core

import com.stripe.rainier.compute._
import com.stripe.rainier.sampler._

trait SBCModel {
  implicit val rng: RNG = ScalaRNG(1528673302081L)
  def sbc: SBC[_, _]
  val sampler: Sampler = HMC(1)
  val warmupIterations: Int = 10000
  val syntheticSamples: Int = 1000
  val nSamples: Int = 10
  def main(args: Array[String]): Unit = {
    sbc.animate(sampler, warmupIterations, syntheticSamples)
    println(s"\nnew goldset:")
    println(s"$samples")
    println(
      s"If this run looks good, please update the goldset in your SBCModel")
  }
  val samples: List[_] = sbc.posteriorSamples(goldset.size)
  def goldset: List[_]
  val description: String
}

/** Continuous **/
object SBCUniformNormal extends SBCModel {
  def sbc = SBC[Double, Continuous](Uniform(0, 1))((x: Real) => Normal(x, 1))
  def goldset =
    List(0.34894625876816177, 0.3790348361022231, 0.3790348361022231,
      0.3568993926476062, 0.3802460062329729, 0.35261406831608055,
      0.39167618696613293, 0.39167618696613293, 0.39167618696613293,
      0.33527734202543946, 0.40392849099990974, 0.3383790194122934,
      0.40929716940436084, 0.3363854857405237, 0.4126431719392441,
      0.4126431719392441, 0.3278710809066796, 0.4242989573388898,
      0.32740099933267947, 0.4203523110740824, 0.3320638238648662,
      0.3911434998459105, 0.35430837794532555, 0.39101358708506667,
      0.35362085698352, 0.38519630031461166, 0.3595010846641803,
      0.38198232574043817, 0.3626703487706857, 0.38053679424458203)
  val description = "Normal(x, 1) with Uniform(0, 1) prior"
}

object SBCLogNormal extends SBCModel {
  def sbc =
    SBC[Double, Continuous](LogNormal(0, 1))((x: Real) => LogNormal(x, x))
  def goldset =
    List(0.1312163643423365, 0.12924577060908882, 0.12859429807173342,
      0.12977138261815618, 0.12782428310952937, 0.12782428310952937,
      0.1298106249642469, 0.12815605189553061, 0.12989207462313646,
      0.12952773051961836, 0.13001747200093006, 0.12869938145650112,
      0.1289252586576651, 0.13139748022639036, 0.127637515883889,
      0.13082056432726005, 0.1293282427047104, 0.13330469355996571,
      0.12448889751493016, 0.13414562728414672, 0.125262788397149,
      0.13298415744622746, 0.12745563458418965, 0.1314165179754614,
      0.12841806366296804, 0.13043185757590664, 0.13287704687584526,
      0.12738972521669306, 0.1326775063438729, 0.12486995290154294)
  val description = "LogNormal(x, x) with LogNormal(0, 1) prior"
}

/**
  * Note: SBCExponential and SBCLaplace are made-up goldsets. SBC on these is wildly slow.
  */
object SBCExponential extends SBCModel {
  def sbc =
    SBC[Double, Continuous](LogNormal(0, 1))((x: Real) => Exponential(x))
  def goldset =
    List(0.4265683630081846, 0.5189050953677488, 0.49924580068677044,
      0.3879796746979638, 0.4341114186909587, 0.4341114186909587,
      0.46249827359385365, 0.5153090873282923, 0.44657645973736837,
      0.4818619620463942, 0.43936322908013287, 0.4437800418959559,
      0.367162365055694, 0.367162365055694, 0.367162365055694,
      0.367162365055694, 0.367162365055694, 0.4330711704882621,
      0.4330711704882621, 0.5628095742189261, 0.45466790056406947)
  val description = "Exponential(x) with LogNormal(0, 1) prior"
}

object SBCLaplace extends SBCModel {
  def sbc = SBC[Double, Continuous](LogNormal(0, 1))((x: Real) => Laplace(x, x))
  def goldset =
    List(0.4265683630081846, 0.5189050953677488, 0.49924580068677044,
      0.3879796746979638, 0.4341114186909587, 0.4341114186909587,
      0.46249827359385365, 0.5153090873282923, 0.44657645973736837,
      0.4818619620463942, 0.43936322908013287, 0.4437800418959559,
      0.367162365055694, 0.367162365055694, 0.367162365055694,
      0.367162365055694, 0.367162365055694, 0.4330711704882621,
      0.4330711704882621, 0.5628095742189261, 0.45466790056406947)
  val description = "Laplace(x, x) with LogNormal(0, 1) prior"
}

/** Discrete **/
object SBCBernoulli extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0, 1))((x: Real) => Bernoulli(x))
  def goldset =
    List(0.3682741265983013, 0.3852529612682177, 0.3604238333388064,
      0.386596856795002, 0.3555033555350904, 0.39217253775032623,
      0.39217253775032623, 0.3550136947273093, 0.38182164324962603,
      0.38182164324962603, 0.36722421685006434, 0.3902898312064711,
      0.3531099114009195, 0.3942443064061138, 0.35565699293349323,
      0.38180128466000113, 0.38180128466000113, 0.37379355799257075,
      0.3692587358496806, 0.3588953235783851, 0.3931958168156864,
      0.3585549007172857, 0.39441682029588876, 0.353399981549561,
      0.38860439210841013, 0.35795264331182514, 0.38336146622540296,
      0.35691143054863744, 0.35691143054863744, 0.39069497264393727)
  val description = "Bernoulli(x) with Uniform(0, 1) prior"
}

object SBCBinomial extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0, 1))((x: Real) => Binomial(x, 10))
  def goldset =
    List(0.38147243011894694, 0.3792506250106033, 0.3818625327189924,
      0.37899610655588944, 0.3817551347380804, 0.37865303804888745,
      0.382353226011894, 0.378662329520548, 0.3813711718903361,
      0.3797297241444936, 0.3810648781495624, 0.37949586261612295,
      0.3816045360785324, 0.37811144289556103, 0.38278660893500366,
      0.3780122673646255, 0.38289830867974556, 0.3773498300880056,
      0.38373229731528535, 0.3772825368937032, 0.3835101187624034,
      0.3765572554675356, 0.3836963442018869, 0.376325762885098,
      0.38441584573317883, 0.3763078378597699, 0.38467943856536113,
      0.3761579262735112, 0.3846855836243943, 0.37628231221203656)
  val description = "Binomial(x, 10) with Uniform(0, 1) prior"
}

object SBCGeometric extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0, 1))((x: Real) => Geometric(x))
  def goldset =
    List(0.38492165404666095, 0.39290365021795404, 0.38124595455441124,
      0.3937551265886634, 0.3787811936046644, 0.3964993934178256,
      0.3964993934178256, 0.3781924187064621, 0.39246565001496075,
      0.39246565001496075, 0.38329392988166666, 0.39623039600228943,
      0.3768367957594843, 0.39830518220569905, 0.3776084488298037,
      0.39330420627497203, 0.39330420627497203, 0.38537933480481107,
      0.3877438056879084, 0.3791804738157883, 0.39802638836055804,
      0.37875775384634797, 0.398832247504752, 0.3761583723269265,
      0.39669787265031914, 0.3778811656832549, 0.3946595299434484,
      0.3772507545529232, 0.3772507545529232, 0.39801591196008695)
  val description = "Geometric(x) with Uniform(0, 1) prior"
}

object SBCGeometricZeroInflated extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0, 1))((x: Real) =>
      Geometric(.3).zeroInflated(x))
  def goldset =
    List(0.3682741265983013, 0.3852529612682177, 0.3604238333388064,
      0.386596856795002, 0.3555033555350904, 0.39217253775032623,
      0.39217253775032623, 0.3550136947273093, 0.38182164324962603,
      0.38182164324962603, 0.36722421685006434, 0.3902898312064711,
      0.3531099114009195, 0.3942443064061138, 0.35565699293349323,
      0.38180128466000113, 0.38180128466000113, 0.37379355799257075,
      0.3692587358496806, 0.3588953235783851, 0.3931958168156864,
      0.3585549007172857, 0.39441682029588876, 0.353399981549561,
      0.38860439210841013, 0.35795264331182514, 0.38336146622540296,
      0.35691143054863744, 0.35691143054863744, 0.39069497264393727)
  val description = "Geometric(.3).zeroInflated(x) with Uniform(0, 1) prior"
}

object SBCNegativeBinomial extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0, 1))((x: Real) => NegativeBinomial(x, 10))
  def goldset =
    List(0.3826339088027273, 0.3847979768838622, 0.3799773694842631,
      0.38689095808409635, 0.3805836984101535, 0.3876939721344903,
      0.37867320349827094, 0.3873603410741769, 0.3818964078806077,
      0.3832596762878613, 0.38392561068958136, 0.3840296250761813,
      0.3812148634476108, 0.3884419225762789, 0.37854965415441755,
      0.3885597760639471, 0.3783843044041756, 0.3783843044041756,
      0.3871690225074736, 0.37922923308910605, 0.3879212140180801,
      0.3813403203263552, 0.3873378961807043, 0.3819920815318904,
      0.3854380689503382, 0.3821855010811748, 0.3842377858185555,
      0.38296393804760825, 0.3841404243217095, 0.37873626825415896)
  val description = "NegativeBinomial(x, 10) with Uniform(0, 1) prior"
}

object SBCBinomialPoissonApproximation extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0, 0.04))((x: Real) => Binomial(x, 200))
  def goldset =
    List(0.014273544653605759, 0.015950309931014, 0.014315261770054339,
      0.015886902395294097, 0.015886902395294097, 0.015886902395294097,
      0.014477445750644968, 0.015681177617862096, 0.014501135864904547,
      0.015694462820097347, 0.014464361533988692, 0.01568544244660479,
      0.01453553514308642, 0.015687584337751685, 0.014630759161890366,
      0.015577398913880694, 0.014571348073460652, 0.015602612023360985,
      0.014589933600994469, 0.015561938269350647, 0.01463201744450533,
      0.015518437682513429, 0.015518437682513429, 0.014749242605025121,
      0.015494944698835488, 0.014742870158914378, 0.015493652233762503,
      0.014713723784612142, 0.015528174166770211, 0.01466657944591594)
  val description =
    "Poisson approximation to Binomial: Binomial(x, 200) with Uniform(0, 0.04) prior"
}

object SBCBinomialNormalApproximation extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0.4, 0.6))((x: Real) => Binomial(x, 300))
  def goldset =
    List(1, 6, 10, 234, 10, 3, 4, 9, 8, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)
  val description =
    "Normal approximation to Binomial: Binomial(x, 200) with Uniform(0.4, 0.6) prior"
}
