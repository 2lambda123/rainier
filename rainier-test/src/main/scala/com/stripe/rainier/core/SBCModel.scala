package com.stripe.rainier.core

import com.stripe.rainier.compute._
import com.stripe.rainier.sampler._

trait SBCModel[T] {
  def sbc: SBC[T]
  val warmupIterations: Int = 10000
  val syntheticSamples: Int = 1000
  val nSamples: Int = 10
  def sampler(iterations: Int) = HMC(warmupIterations, iterations, 1)
  def main(args: Array[String]): Unit = {
    implicit val rng: RNG = ScalaRNG(1528673302081L)
    com.stripe.rainier.compute.Log.showSevere
    sbc.animate(syntheticSamples)(sampler)
    println(s"\nnew goldset:")
    println(s"$samples")
    println(s"\ngoldset true value: $trueValue")
    println(
      s"If this run looks good, please update the goldset in your SBCModel")
  }
  val (samples, trueValue) = {
    implicit val rng: RNG = ScalaRNG(1528673302081L)
    val (values, trueValue) = sbc.synthesize(syntheticSamples)
    val (model, real) = sbc.fit(values)
    val samples =
      model.sample(sampler(goldset.size), 1).predict(real)
    (samples, trueValue)
  }

  def goldset: List[Double]
  val description: String
}

/** Continuous **/
object SBCUniformNormal extends SBCModel[Double] {
  def sbc = SBC(Uniform(0, 1))((x: Real) => Normal(x, 1))
  def goldset =
    List(0.3854723379940953, 0.3712137438594131, 0.43134880136127896,
      0.39166287794390964, 0.36034944190088586, 0.4363648275460457,
      0.4363648275460457, 0.48312564905453637, 0.4835863620499919,
      0.4089989544324678, 0.3129305360472625, 0.41206453128643117,
      0.4640397531448101, 0.4640397531448101, 0.3896627427421734,
      0.3671574196721134, 0.3749229947323898, 0.3979329042992483,
      0.3778933658325631, 0.4681309017086722, 0.4025898854482242,
      0.4025898854482242, 0.4025898854482242, 0.38858218734099176,
      0.38858218734099176, 0.38858218734099176, 0.4406360528010812,
      0.4406360528010812, 0.37180327980725536, 0.38274093858468283)

  val description = "Normal(x, 1) with Uniform(0, 1) prior"
}

object SBCLogNormal extends SBCModel[Double] {
  def sbc =
    SBC(LogNormal(0, 1))((x: Real) => LogNormal(x, x))
  def goldset =
    List(0.7875333530003685, 0.8039725526669401, 0.8039725526669401,
      0.7724478891572261, 0.7597756781061603, 0.7639139781194014,
      0.7739293552190287, 0.7644026192002902, 0.8051841178453458,
      0.7784703515401229, 0.7784703515401229, 0.7784703515401229,
      0.7694625725017661, 0.7694625725017661, 0.7694625725017661,
      0.7925850075634521, 0.7925850075634521, 0.7627781889224813,
      0.7672476402061872, 0.7867513012566807, 0.7615323083020641,
      0.7573367764047984, 0.7833633357834364, 0.7423795837503151,
      0.7891330821550931, 0.7491552866379743, 0.8111576269258305,
      0.7910536746781706, 0.7910536746781706, 0.772414398782042)

  val description = "LogNormal(x, x) with LogNormal(0, 1) prior"
}

object SBCExponential extends SBCModel[Double] {
  def sbc =
    SBC(LogNormal(0, 1))((x: Real) => Exponential(x))
  def goldset =
    List(0.7562275728719202, 0.7703942036301611, 0.7703942036301611,
      0.7638816671814425, 0.7844379475182354, 0.7844379475182354,
      0.830299999653941, 0.8307806633934722, 0.8307806633934722,
      0.7994975553988537, 0.7994975553988537, 0.7716218294415705,
      0.8224531074679579, 0.7592560267854769, 0.8683110188884123,
      0.7525245121419571, 0.7525245121419571, 0.7499227131622902,
      0.7778875587756484, 0.7632917622824335, 0.7823102850249397)
  val description = "Exponential(x) with LogNormal(0, 1) prior"
}

object SBCLaplace extends SBCModel[Double] {
  def sbc = SBC(LogNormal(0, 1))((x: Real) => Laplace(x, x))
  def goldset =
    List(0.7666382582987259, 0.7772233343356004, 0.7826832519707133,
      0.7463274643762953, 0.7463274643762953, 0.7777929017204321,
      0.7777929017204321, 0.7607958140558475, 0.7669078839985344,
      0.7567364666852664, 0.7864287436151675, 0.7737299865124305,
      0.7737299865124305, 0.7628480434824207, 0.7694590924444589,
      0.7694590924444589, 0.75138995871966, 0.7561161757648289,
      0.7388432009696753, 0.7789498649795126, 0.7640076153696176)

  val description = "Laplace(x, x) with LogNormal(0, 1) prior"
}

object SBCGamma extends SBCModel[Double] {
  def sbc = SBC(LogNormal(0, 1))((x: Real) => Gamma(x, x))
  def goldset =
    List(0.7659398356847715, 0.7650068258099851, 0.7535780737376385,
      0.7535780737376385, 0.7502139656249762, 0.7496219307786363,
      0.7721700977194984, 0.73432354139346, 0.7642405843508685,
      0.768450143364918, 0.768450143364918, 0.768450143364918,
      0.7536089441156865, 0.7536089441156865, 0.7622358653550919,
      0.7530105158883502, 0.7445280545649072, 0.7675111687316849,
      0.7649352744518296, 0.7669438719741848, 0.7669438719741848)
  val description = "Gamma(x, x) with LogNormal(0, 1) prior"
}

/** Discrete **/
object SBCBernoulli extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0, 1))((x: Real) => Bernoulli(x))
  def goldset =
    List(0.4683557326407245, 0.47217907372896134, 0.43619037884271,
      0.43619037884271, 0.4665639273893247, 0.4665639273893247,
      0.4510771607766309, 0.4579978807256402, 0.448680571088962,
      0.4745275471616344, 0.4623656861328884, 0.44268732789762455,
      0.45345357179430057, 0.4601247117228379, 0.4601247117228379,
      0.44358271562402946, 0.44644882485252185, 0.44644882485252185,
      0.46925846061981674, 0.45433059864775854, 0.45433059864775854,
      0.4406290037335637, 0.4644165746541881, 0.4644165746541881,
      0.44964613960726746, 0.4713534881684764, 0.44606781533166373,
      0.45131605922351814, 0.45131605922351814, 0.45131605922351814)

  val description = "Bernoulli(x) with Uniform(0, 1) prior"
}

object SBCBinomial extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0, 1))((x: Real) => Binomial(x, 10))
  def goldset =
    List(0.47008232783600296, 0.46126021059317435, 0.4514153809183895,
      0.4537062251536269, 0.4540198788429169, 0.4540198788429169,
      0.4512033104290315, 0.46167186936045784, 0.4556754858696954,
      0.4556754858696954, 0.45309254010634054, 0.45309254010634054,
      0.4520746969501011, 0.46109849835604105, 0.4536275158538349,
      0.4436713850465477, 0.4532422489178888, 0.44631407058532896,
      0.4499717672630099, 0.4474400254691134, 0.4564810987011857,
      0.4564810987011857, 0.4612198893977679, 0.4612198893977679,
      0.4686625420855199, 0.4550488619249771, 0.4550488619249771,
      0.4460963240903448, 0.45745281204598437, 0.45283457151057516)

  val description = "Binomial(x, 10) with Uniform(0, 1) prior"
}

object SBCGeometric extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0, 1))((x: Real) => Geometric(x))
  def goldset =
    List(0.4356575319477493, 0.4381477337697662, 0.4147436913265533,
      0.4147436913265533, 0.43448195327327177, 0.43448195327327177,
      0.42442243505005295, 0.4289172586729836, 0.42286249005306337,
      0.4396695572155313, 0.4317618132502886, 0.41896783832742274,
      0.4259585798980151, 0.43030073944034936, 0.43030073944034936,
      0.41954902886195644, 0.4214049797194338, 0.4214049797194338,
      0.43623845274264544, 0.4265379468547169, 0.4265379468547169,
      0.41762644747743155, 0.43308627825986573, 0.43308627825986573,
      0.4234918528563692, 0.43760407001843243, 0.4211660643657091,
      0.4245705303544174, 0.4245705303544174, 0.4245705303544174)

  val description = "Geometric(x) with Uniform(0, 1) prior"
}

object SBCGeometricZeroInflated extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0, 1))((x: Real) => Geometric(.3).zeroInflated(x))
  def goldset =
    List(0.3682741265983013, 0.3852529612682177, 0.3604238333388064,
      0.386596856795002, 0.3555033555350904, 0.39217253775032623,
      0.39217253775032623, 0.3550136947273093, 0.38182164324962603,
      0.38182164324962603, 0.36722421685006434, 0.3902898312064711,
      0.3531099114009195, 0.3942443064061138, 0.35565699293349323,
      0.38180128466000113, 0.38180128466000113, 0.37379355799257075,
      0.3692587358496806, 0.3588953235783851, 0.3931958168156864,
      0.3585549007172857, 0.39441682029588876, 0.353399981549561,
      0.38860439210841013, 0.35795264331182514, 0.38336146622540296,
      0.35691143054863744, 0.35691143054863744, 0.39069497264393727)
  val description = "Geometric(.3).zeroInflated(x) with Uniform(0, 1) prior"
}

object SBCNegativeBinomial extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0, 1))((x: Real) => NegativeBinomial(x, 10))
  def goldset =
    List(0.4675921819235278, 0.4611027029372764, 0.4538506392604849,
      0.45553875130873583, 0.4557689580404127, 0.4557689580404127,
      0.45369424762993527, 0.46140293279219013, 0.45698799338035684,
      0.45698799338035684, 0.45508550337390197, 0.45508550337390197,
      0.45433637636020996, 0.46098060721335776, 0.455479736834608,
      0.44814306452258984, 0.45520317909240793, 0.4500921547910794,
      0.45279135190851816, 0.45092331350816095, 0.4575846906456723,
      0.4575846906456723, 0.46106914354898, 0.46106914354898,
      0.4665449846937536, 0.4565292533713978, 0.4565292533713978,
      0.44993083063538214, 0.4583010648474365, 0.45489572424092545)

  val description = "NegativeBinomial(x, 10) with Uniform(0, 1) prior"
}

object SBCBinomialPoissonApproximation extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0, 0.04))((x: Real) => Binomial(x, 200))
  def goldset =
    List(0.017474460571965656, 0.017985376407802955, 0.018014202864905154,
      0.018014202864905154, 0.017758329814460298, 0.017758329814460298,
      0.017758329814460298, 0.018085557790352536, 0.01767683480980142,
      0.01779870474809021, 0.01779870474809021, 0.017253889467567424,
      0.017254846959008446, 0.0179037072184388, 0.017408520384137535,
      0.017207532738730383, 0.01733534170604952, 0.017952111785502278,
      0.017263658862338455, 0.017169966826515313, 0.017610512745440204,
      0.016988316731392856, 0.01802221786307789, 0.01753336324887238,
      0.017395371382223156, 0.017395371382223156, 0.017626210756499908,
      0.01765011315872873, 0.01763387278539236, 0.01763387278539236)
  val description =
    "Poisson approximation to Binomial: Binomial(x, 200) with Uniform(0, 0.04) prior"
}

object SBCBinomialNormalApproximation extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0.4, 0.6))((x: Real) => Binomial(x, 300))
  def goldset =
    List(0.3849093699203164, 0.3822629591199987, 0.38374303903059914,
      0.3832324864849272, 0.38389219985327067, 0.3835866724851299,
      0.3830818707173923, 0.3835660923949862, 0.3841609845229018,
      0.3820783526940713, 0.3849827665275495, 0.38236510331364865,
      0.3838715727269887, 0.3840183371678221, 0.3828960655858176,
      0.3841785878664216, 0.3827156431825414, 0.38488715647596444,
      0.38157319616823965, 0.38511364643858215, 0.3819850513881394,
      0.3857373545069211, 0.3818792213826954, 0.38587080685826664,
      0.3813170524170525, 0.38588405883758004, 0.3809126103183984,
      0.38614580147352096, 0.38091354056091625, 0.3841577712144981)
  val description =
    "Normal approximation to Binomial: Binomial(x, 200) with Uniform(0.4, 0.6) prior"

}

object SBCLargePoisson extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0.8, 1))((x: Real) => Poisson(x * 1000))
  def goldset =
    List(0.8902601470342969, 0.8869402970648902, 0.8886921242682507,
      0.8878462559772805, 0.8889800682332818, 0.8889800682332818,
      0.8872622176801511, 0.8879939326112549, 0.8904621841810949,
      0.8876167546369573, 0.8890393423153461, 0.8890393423153461,
      0.8890393423153461, 0.888599517564143, 0.890499017648807,
      0.8871059805145671, 0.8895198217471241, 0.8897586986481116,
      0.8903703050961495, 0.888659568152303, 0.888659568152303,
      0.8893754458915317, 0.8884068668848245, 0.8893873645542189,
      0.8898934014466257, 0.8885345030314411, 0.8885345030314411,
      0.8889907836514992, 0.8883340053809832, 0.8887111806293799)

  val description =
    "Poisson(x*1000) with Uniform(0.8, 1) prior"
}
